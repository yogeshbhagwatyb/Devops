What is Container?
A container is a lightweight, standalone, executable package that includes everything which needed to run software, including the code, 
runtime, libraries, and system tools. Containers provide a consistent and portable environment across different computing environments, making it easier to develop, deploy, 
and scale applications.
Containers can run on any system that supports containerization, making them highly portable. This portability is achieved through the use of container runtimes and orchestration tools.
Containers share the host operating system's kernel, which makes them more lightweight and efficient compared to traditional virtual machines. They start up quickly and consume fewer resources.

What is CMD?
CMD instruction is used in a Dockerfile to specify the default command and arguments to execute for the container when it starts. 
Sample - CMD ["executable", "param1", "param2"]

FROM ubuntu
CMD ["echo", "Hello, World!"] > In this example, the default command for the container is set to echo "Hello, World!". You can override this command when running the container
docker run myimage echo "Goodbye, World!"
This would output "Goodbye, World!" instead of the default message

What is Entrypoint?
In a Dockerfile, the ENTRYPOINT instruction is used to specify the command that will be run when a container is started from the built image
Here is the basic syntax of the ENTRYPOINT instruction in a Dockerfile > ENTRYPOINT ["executable", "param1", "param2", ...]

Here's an example: FROM ubuntu
ENTRYPOINT ["echo", "Hello, World!"]
In this example, if you build an image from this Dockerfile and run a container, it will automatically execute the echo "Hello, World!" command.

Difference between CMD and ENTRYPOINT?
In a Dockerfile, both CMD and ENTRYPOINT are instructions used to define the default command that will be executed when a Docker container starts. 
However, they serve slightly different purposes and can be used together.
CMD Instruction:
The CMD instruction specifies the default command and parameters for the container.
You can provide the command and its arguments directly in the CMD instruction.
If the Dockerfile includes multiple CMD instructions, only the last one is effective.
The CMD instruction can be overridden at runtime by providing a command when running the container.
ENTRYPOINT Instruction:
The ENTRYPOINT instruction also specifies the default command and parameters for the container.
However, it is more rigid compared to CMD. The ENTRYPOINT command and its parameters are not easily overridden at runtime; instead, additional 
command-line arguments are appended to the ENTRYPOINT command.
If a Dockerfile has both CMD and ENTRYPOINT, the CMD arguments will be passed as arguments to the ENTRYPOINT.
ENTRYPOINT is often used when you want to define a fixed executable and provide flexibility by allowing additional arguments to be passed.
In summary, while both CMD and ENTRYPOINT set the default command for a container, CMD is more easily overridden at runtime, and ENTRYPOINT is 
useful when you want to define a fixed command with some flexibility for additional arguments.

A Dockerfile is a text document that contains a set of instructions for building a Docker image.
Base Image: FROM ubuntu:20.04
The Dockerfile typically starts with a FROM instruction that specifies the base image on which the new image will be built. 
The base image provides the foundation for your application, and it can include an operating system, runtime, libraries, and other dependencies.

Instructions: RUN apt-get update && apt-get install -y python3
COPY . /app
WORKDIR /app
EXPOSE 8080
Dockerfiles consist of a series of instructions, each representing a step in the image-building process. Common instructions include RUN (execute commands), 
COPY (copy files from the host to the image), WORKDIR (set the working directory), EXPOSE (declare ports to be exposed), and more.

Environment Variables: ENV APP_HOME /app
You can set environment variables within the Dockerfile using the ENV instruction. This allows you to configure aspects of the image or the application running
inside the container.

Executing Commands:
The RUN instruction is used to execute commands during the image-building process. This is where you install dependencies, configure settings, and perform other tasks.

Working Directory: WORKDIR /app
The WORKDIR instruction sets the working directory for subsequent instructions in the Dockerfile. It affects the following RUN, CMD, ENTRYPOINT, COPY, and ADD instructions.

Copying Files: COPY . /app
The COPY instruction is used to copy files or directories from the host machine to the image. This is commonly used to include application code and configuration files.

Expose Ports: EXPOSE 8080
The EXPOSE instruction informs Docker that the container will listen on specified network ports at runtime. It does not actually publish the ports; it is used as metadata.

Container Execution Defaults: CMD ["python3", "app.py"]
The CMD instruction specifies the default command to run when the container starts. It can be overridden at runtime. If the Dockerfile includes multiple CMD instructions, 
only the last one is effective.

Entrypoint: ENTRYPOINT ["python3"]
CMD ["app.py"]
The ENTRYPOINT instruction configures a container to run as an executable. It is often used with CMD to set a default command with optional arguments.

How to delete unused Docker Volumes?
List Unused Volumes:
You can use the docker volume ls command with the --filter option to list only the volumes that are not currently in use by any container.The filter criteria can be set 
to "dangling=true."
docker volume ls --filter dangling=true
This command will display a list of unused volumes.
Remove Unused Volumes:
Once you've identified the unused volumes, you can use the docker volume rm command to remove them. Replace volume_name with the actual name or ID of the volume you 
want to remove.
docker volume rm volume_name
If you want to remove all unused volumes in one command, you can use a combination of docker volume ls and docker volume rm:
docker volume rm $(docker volume ls --filter dangling=true -q)

What is Overlay network in Docker?
An overlay network in Docker is a network driver that allows multiple Docker daemons running on different nodes to communicate with each other. It enables communication
between containers running on different hosts in a Docker Swarm. Docker Swarm is Docker's native clustering and orchestration solution for managing a swarm of Docker nodes.
Multi-Host Communication:
Overlay networks enable communication between containers across multiple Docker hosts (nodes) in a Swarm.
Automatic Encryption:
Traffic on overlay networks is automatically encrypted, providing secure communication between containers on different nodes.
Example Usage:
Create an Overlay Network:
docker network create --driver overlay my-overlay-network
Deploy a Service on the Overlay Network:
docker service create --name my-web-app --network my-overlay-network -p 80:80 my-web-image
Scale the Service:
docker service scale my-web-app=3
Communication Between Nodes:
Containers within the my-overlay-network can communicate with each other, regardless of the node they are running on.
Overlay networks provide a powerful mechanism for orchestrating containerized applications in a distributed environment, allowing for seamless communication and scaling 
across multiple Docker Swarm nodes. They are particularly useful in microservices architectures where services need to communicate with each other while being deployed 
across different hosts.






































