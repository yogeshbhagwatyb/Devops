Deployment
In Kubernetes, deployment is a resource object that allows you to declaratively manage the deployment of applications. A deployment enables you to describe an 
application's life cycle, including which images to use for the app, the number of pod replicas, and the way to update them. Deployments provide a convenient 
way to manage the deployment process, handle rolling updates, and rollbacks if necessary.
Key components and concepts related to deployments in Kubernetes include:
Pods: The basic unit in Kubernetes. A pod represents a single instance of a running process in a cluster. Deployments manage one or more replica pods.
ReplicaSets: Deployments use ReplicaSets to maintain the desired number of replicas (pods) for an application. If the number of replicas is less than the desired
state, a new pod is created. If there are too many replicas, the excess ones are scaled down.
Rolling Updates: Deployments support rolling updates, which means you can update a deployment to a new version without downtime. This is achieved by gradually replacing
old pods with new ones, ensuring a smooth transition.
Rollbacks: If a new version of the application has issues, you can easily roll back to a previous version using the deployment's revision history.
Desired State Configuration: Deployments allow you to specify the desired state of your application, and Kubernetes takes care of maintaining that state. If a pod goes 
down or a node fails, Kubernetes automatically works to bring the system back to the desired state.

mydeployment.yml
apiVersion: apps/v1 >>>> 
kind: Deployment
metadata:
  name: webapp-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp-container
        image: nginx:latest
        ports:
        - containerPort: 80
apiVersion and kind: These fields specify the API version and the type of resource being created. In this case, it's a Deployment resource in the "apps/v1" API version.
metadata: This section contains metadata for the deployment, such as the name of the deployment. In this example, the deployment is named "webapp-deployment."
spec: This is where you define the desired state of the deployment.
replicas: Specifies the desired number of replicas (pods) for the application. In this case, it's set to 3.
selector: Defines how the deployment identifies which pods it manages. The matchLabels field specifies that it should manage pods with the label "app: webapp."
template: Describes the pod template used for the deployment.
metadata: Labels to be applied to the pods. In this example, the pods will have the label "app: webapp."
spec: Specifies the pod's specification.
containers: Defines the containers within the pod. In this case, there's one container named "webapp-container" using the Nginx image. The container exposes port 80.
Now, if you apply this YAML file using the kubectl apply -f filename.yaml command, Kubernetes will create a deployment named "webapp-deployment" with three replicas of 
the Nginx-based pod. The deployment ensures that the specified number of replicas is always running and provides features like rolling updates and rollbacks.

DaemonSets
In Kubernetes, a DaemonSet is a resource object that ensures that a copy of a specific pod runs on each node within a cluster. Unlike Deployments, which are designed to 
ensure a specific number of replicas are running across the entire cluster, DaemonSets are used for running a single instance of a pod on every node.

Difference between Deployment and Daemonset
While both DaemonSets and Deployments in Kubernetes are used to manage the deployment and scaling of pods, they have different use cases and behaviors. Here are the key 
differences between DaemonSets and Deployments:
Pod Placement:
DaemonSet: Ensures that a copy of a specific pod runs on every node in the cluster. It's suitable for scenarios where you want to run a pod on each node, such as for 
node-specific tasks or for deploying infrastructure-related components like monitoring agents or logging agents.
Deployment: Manages the deployment of pods across the entire cluster, aiming to maintain a desired number of replicas. Pods managed by Deployments are usually distributed
across nodes based on resource availability and scheduling decisions.
Scaling:
DaemonSet: Scales by adding one instance of the pod to each new node that joins the cluster. It does not typically scale the number of replicas on existing nodes.
Deployment: Scales by adjusting the number of replicas up or down based on the desired state specified in the Deployment configuration. Deployments can scale across
nodes and can handle rolling updates and rollbacks.
Updates and Rollbacks:
DaemonSet: Does not handle rolling updates in the same way Deployments do. DaemonSets are often used for infrastructure components that are less likely to require 
frequent updates.
Deployment: Supports rolling updates, allowing you to update the application to a new version without downtime. If the update fails, you can easily roll back to a 
previous version using the deployment's revision history.
Node Affinity:
DaemonSet: Can be configured with node affinity rules to control on which nodes the pods should run, based on node labels.
Deployment: Uses node affinity and anti-affinity to influence the scheduling of pods but may not be as directly focused on running a pod on every node.
Use Cases:
DaemonSet: Suited for tasks or services that need to run on each node, such as monitoring agents, logging agents, or node-specific tasks.
Deployment: Suited for deploying and managing application workloads that need to scale across the entire cluster.
In summary, DaemonSets are designed for scenarios where you want a pod to run on every node, whereas Deployments are more versatile and suitable for managing the deployment
and scaling of application workloads across the cluster. The choice between DaemonSets and Deployments depends on the specific requirements of your application and 
infrastructure components.

Services
In Kubernetes, a Service is an abstraction that defines a logical set of pods and a policy by which to access them. Services enable the decoupling of the frontend (client) and 
backend (server) components in a distributed application, allowing them to communicate without needing to know the specific IP addresses or locations of individual pods.
Key features and aspects of Kubernetes Services include:
Stable Network Endpoint:
A Service is assigned a stable IP address and DNS name (hostname) within the cluster, known as a ClusterIP. This IP address remains constant even if the pods behind the Service 
are scaled up or down.
Load Balancing:
Services can distribute incoming network traffic across multiple pods. This helps in load balancing the traffic and ensuring that requests are distributed evenly to the pods that
make up the service.
Service Types:
There are different types of services in Kubernetes, including:
ClusterIP: The default service type. It exposes the Service on a cluster-internal IP.
NodePort: Exposes the Service on each node's IP at a static port. It also creates a ClusterIP service, and the NodePort service routes to it.
LoadBalancer: Exposes the Service externally using a cloud provider's load balancer. It also creates a ClusterIP service and routes external traffic to it.
ExternalName: Maps the Service to the contents of the externalName field (e.g., a DNS name).
Selector and Labels:
A Service selects pods based on labels. Pods with matching labels are considered part of the Service. This allows you to group related pods and expose them collectively.
Service Discovery:
Services provide a way for other pods within the cluster to discover and communicate with each other. Pods can connect to a service using the service name and port, and Kubernetes takes care of routing the traffic to the appropriate pod.
Headless Services:
A Service can be configured as "headless," meaning it does not assign a ClusterIP. This is useful when you want to perform DNS-based service discovery without load balancing.


1. Cluster Information:
Command: kubectl cluster-info
Example: kubectl cluster-info
Explanation: Displays information about the Kubernetes cluster, including the master and services.

2. Nodes:
Command: kubectl get nodes
Example: kubectl get nodes
Explanation: Lists all nodes in the cluster, providing information about their status.

3. Pods:
Command: kubectl get pods
Example: kubectl get pods
Explanation: Lists all pods in the default namespace, showing their names and status.

4. Deployments:
Command: kubectl get deployments
Example: kubectl get deployments
Explanation: Lists all deployments in the default namespace, displaying information about replicas and current replicas.

5. Services:
Command: kubectl get services
Example: kubectl get services
Explanation: Lists all services in the default namespace, providing information about their names and Cluster IP.

6. ConfigMaps:
Command: kubectl get configmaps
Example: kubectl get configmaps
Explanation: Lists all ConfigMaps in the default namespace, showing their names and data.

7. Namespaces:
Command: kubectl get namespaces
Example: kubectl get namespaces
Explanation: Lists all namespaces in the cluster, helping organize and isolate resources.

8. Port Forwarding:
Command: kubectl port-forward [pod-name] [local-port]:[remote-port]
Example: kubectl port-forward mypod 8080:80
Explanation: Forwards local port 8080 to port 80 on the pod named mypod for local access.

9. Apply Configuration:
Command: kubectl apply -f [filename]
Example: kubectl apply -f deployment.yaml
Explanation: Applies the configuration defined in deployment.yaml to create or update resources in the cluster.

10. Delete Resource:
Command: kubectl delete [resource-type] [resource-name]
Example: kubectl delete pod mypod
Explanation: Deletes the pod named mypod. Replace [resource-type] with the resource type you want to delete.
