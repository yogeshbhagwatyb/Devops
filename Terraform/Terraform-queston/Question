What is Infrastructure as Code?
Infrastructure as code means writing code to provision, manage and deploy IT infrastructure.

What is Terraform Provider?
A provider in Terraform is a plugin that enables interaction with an API. This includes Cloud providers and Software-as-a-service providers. 
The providers are specified in the Terraform configuration code. They tell Terraform which services it needs to interact with.
In Terraform, a provider is a plugin that enables Terraform to interact with a specific infrastructure platform or service. 
Providers are responsible for understanding the API interactions and resource lifecycle of the target platform. 
They serve as the bridge between Terraform and the underlying infrastructure, allowing Terraform to manage resources, such as virtual machines, 
databases, and networks.

What is Terraform resource type
In Terraform, a resource type represents a specific type of infrastructure object that can be managed by Terraform. 
Resources are the fundamental building blocks of a Terraform configuration, and they define the desired state of a particular piece 
of infrastructure on the target platform. 
A resource type corresponds to a specific service or component provided by a Terraform provider.
In Terraform, resources are the most important part of Terraform. Resources are defined by resource blocks. 
A resource can define one or more infrastructure resource objects, such as VPCs, virtual machines, or DNS records, Consul key-value pair data, etc.

What is Terraform state
In Terraform, the state is a crucial aspect of managing infrastructure. The state represents the current state of the resources defined in your Terraform configuration. 
It includes information about which resources are being managed, their current attribute values, and metadata needed by Terraform to orchestrate updates and 
modifications to the infrastructure.
Key characteristics of Terraform state include
Terraform state is stored in a backend, which could be a local file, a remote file (such as an S3 bucket), or a state management service 
(like Terraform Cloud). The backend is configured in the Terraform configuration or using the -backend-config option.
terraform {
  backend "s3" {
    bucket = "my-terraform-state-bucket"
    key    = "path/to/terraform.tfstate"
    region = "us-west-2"
  }
}

Locking:
Terraform supports state locking to prevent multiple users or processes from modifying the state simultaneously. Locking is essential to 
prevent conflicts when multiple Terraform executions are trying to make changes concurrently. The backend determines how locking is implemented.

Sensitive Data:
Terraform state may contain sensitive information, such as passwords or private keys. To enhance security, Terraform allows marking certain 
attributes as sensitive, ensuring that their values are not displayed in the command-line output or stored in logs
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  key_name      = sensitive(var.key_name)
}
In this example, the key_name attribute is marked as sensitive.

5. Explain terraform command
terraform init:
This command is used to initialize a Terraform configuration.
It downloads the provider plugins and sets up the working directory.

terraform plan:
This command is used to create an execution plan.
It compares the current state of the infrastructure (as recorded in the Terraform state) with the desired state described in your configuration files.
It provides information on what actions Terraform will take to bring the infrastructure to the desired state.

terraform apply:
This command is used to apply the changes proposed in a Terraform plan.
It executes the actions described in the execution plan to reach the desired state.
It can create, modify, or delete resources according to the configuration.

terraform state:
This command is used to interact with Terraform's state.
It provides various subcommands to manage the Terraform state, such as listing resources, moving resources, and removing resources from the state.
Let's delve into the details of terraform state and its subcommands:
terraform state list:
Lists all resources in the Terraform state.
Example: terraform state list

terraform state show:
Displays the attributes of a specific resource in the Terraform state.
Example: terraform state show aws_instance.example

terraform state mv:
Moves a resource instance from one address to another in the Terraform state.
Useful when you want to rename or reorganize your resources.
Example: terraform state mv aws_instance.old aws_instance.new

terraform state rm:
Removes a resource instance from the Terraform state.
Use with caution, as it doesn't destroy the actual resource; it just removes it from Terraform's management.
Example: terraform state rm aws_instance.example

terraform state pull:
Fetches the current state from the backend and saves it locally.
Useful when you want to see the latest state without applying changes.
Example: terraform state pull

terraform state push:
Updates the remote state with the local state.
Useful when working with remote backends like Terraform Cloud.
Example: terraform state push

terraform state refresh:
Updates the Terraform state file with the real-world infrastructure.
Fetches the latest state from the provider and updates the local state file.
Example: terraform state refresh

terraform state import:
Associates an existing resource with a Terraform resource in the state.
Allows you to import pre-existing infrastructure into Terraform management.
Example: terraform state import aws_instance.example i-0123456789abcdef0

terraform destroy:
This command is used to destroy the infrastructure defined in your Terraform configuration.
It reads the current state and figures out what resources need to be deleted to bring the infrastructure to an empty state.

terraform validate:
This command is used to validate the configuration files in the current directory.
It checks the syntax of the files and ensures that all required providers are configured.

terraform import:
This command is used to import existing infrastructure into Terraform.
It associates a Terraform resource with an existing resource in the real world, allowing Terraform to manage it.

terraform refresh:
This command is used to update the state file with the real-world infrastructure.
It reads the current state of the infrastructure and updates the state file with the latest information about resources.
These commands are fundamental to the Terraform workflow, allowing you to initialize, plan, apply, and manage infrastructure as code.

What is terraform variable
In Terraform, variables are a way to parameterize your infrastructure configuration. They allow you to define values that can be used in your Terraform configurations,
making them more flexible and reusable. Variables are typically used to abstract away values that may change between environments, deployments, or over time.


How to use terraform outputs
Terraform outputs allow you to expose information from your infrastructure configuration, making it accessible after the deployment. 
Outputs are useful for providing information about resources created by Terraform, such as IP addresses, URLs, or any other relevant data. 
Here's how you can use Terraform outputs:
output "instance_id" {
  value = aws_instance.example.id
}

output "public_ip" {
  value = aws_instance.example.public_ip
}

What is terraform.tfvars file?
Variables.tf is for the declaration of variables, name, type, description, default values and additional meta data.
*.tfvars is for giving the actual variable values during execution. It allows you to customize the specific execution


How to reference attribute of one resource in another resource block
In Terraform, when you declare resources, you can use the outputs of one resource as input for another. Here's a more detailed explanation with a focus on AWS resources:
# Resource 1: AWS S3 Bucket
resource "aws_s3_bucket" "my_bucket" {
  bucket = "my-unique-bucket-name"
  acl    = "private"
}

# Resource 2: AWS DynamoDB Table
resource "aws_dynamodb_table" "my_table" {
  name           = "my-dynamodb-table"
  billing_mode   = "PAY_PER_REQUEST"
  read_capacity  = 5
  write_capacity = 5

  attribute {
    name = "ID"
    type = "S"
  }

  # Reference the S3 bucket's ARN from the first resource
  tags = {
    BucketName = aws_s3_bucket.my_bucket.arn
  }
}

In this example:

Resource 1 (aws_s3_bucket): Declares an AWS S3 bucket named "my-unique-bucket-name".

Resource 2 (aws_dynamodb_table): Declares an AWS DynamoDB table named "my-dynamodb-table". This resource includes a tag where the BucketName is set to 
the ARN (Amazon Resource Name) of the S3 bucket declared in Resource 1.
The syntax aws_s3_bucket.my_bucket.arn references the arn attribute of the aws_s3_bucket resource with the name my_bucket. 
This is how you access the attributes of a resource in Terraform.
By referencing the output of the first resource (aws_s3_bucket.my_bucket.arn) in the second resource (aws_dynamodb_table.my_table), 
you're essentially telling Terraform to create a dependency between the two resources. Terraform will ensure that the S3 bucket is created before the DynamoDB table
because the DynamoDB table is using information from the S3 bucket.\
This is a basic example, and the actual attributes you reference will depend on the resources you're working with. 
Always refer to the official documentation for the specific resources and Terraform itself for accurate attribute names and usage.

 How to configure s3 backend to store state
First create S3 bucket
# Resource 1: AWS S3 Bucket
resource "aws_s3_bucket" "my_bucket" {
  bucket = "your-unique-s3-bucket-name"
  acl    = "private"
}

Then 

# backend.tf
terraform {
  backend "s3" {
    bucket         = "your-unique-s3-bucket-name"
    key            = "path/to/terraform.tfstate"  # Optional: Define a specific path for your state file
    region         = "your-aws-region"
    encrypt        = true
    dynamodb_table = "your-lock-table-name"  # Optional: Use DynamoDB for state locking
  }
}
bucket: The name of the S3 bucket where the Terraform state file will be stored.
key: The path within the bucket to store the state file. This is optional but recommended for better organization.
region: The AWS region where the S3 bucket is located.
encrypt: Set to true to enable server-side encryption of the state file.
dynamodb_table: (Optional) If you want to use DynamoDB for state locking, provide the name of the DynamoDB table.

What are the advantages of S3 Backend?
Remote State Storage:
The state file contains information about the current state of your infrastructure. By storing it in an S3 bucket, you centralize the management of this critical information. 
This is particularly useful in collaborative environments or when managing infrastructure across multiple machines.
Concurrent State Access:
Storing the state file remotely allows multiple team members to access and modify the state concurrently. This is important when working on larger projects
with multiple contributors.
Consistency and Coordination:
An S3 backend allows Terraform to use a remote storage system for the state file. This helps ensure that all team members are working with the same state, 
promoting consistency and coordination when making changes to the infrastructure.
State Locking:
The S3 backend supports state locking using DynamoDB tables. This prevents multiple users or processes from modifying the state at the same time, 
reducing the risk of conflicts and potential data corruption.
Secure Storage:
Amazon S3 provides secure and durable object storage. Using S3 as a backend ensures that your state file is stored securely and is resilient to hardware failures. 
Additionally, you can enable server-side encryption to further enhance data security.
Audit Trail:
S3 provides versioning, which allows you to track changes to the state file over time. This can be useful for auditing and understanding
the history of your infrastructure changes.
Ease of Integration with AWS Services:
If your infrastructure is primarily hosted on AWS, using an S3 backend provides seamless integration with other AWS services. You can easily manage 
access control, logging, and monitoring for your S3 bucket.
Remote Backend Configuration:
The backend configuration is stored separately from your main Terraform configurations. This makes it easier to manage sensitive information like 
access keys, secret keys, and bucket names without exposing them in your main configuration files.
Scalability:
S3 is designed for scalability and can handle large amounts of data. This makes it suitable for storing and retrieving Terraform state files, even in 
environments with extensive infrastructure.
Ease of Collaboration:
Storing the state file in an S3 bucket makes it easy to share the state among team members. This is especially beneficial in scenarios where multiple 
individuals or teams are working on different parts of the infrastructure.


Explain what is a Provider Plugin?
provider plugin refers to a specific type of plugin responsible for interacting with a particular infrastructure or service provider. 
Terraform providers are responsible for understanding API interactions and resource lifecycles for a specific platform, enabling Terraform to manage resources on that platform.


How to import existing resources into a state file
Create Terraform Configuration:
Create a new or modify an existing Terraform configuration file (usually with a .tf extension) to include the resource you 
want to import. Specify the resource type and necessary configuration settings. 
This configuration will act as a placeholder for the imported resource.
# main.tf
resource "aws_instance" "example" {
  # Give all the neccessary details as deatils needed when need to create new instance
}
#### Declared provider if it is not same ###
terraform init
terraform import <resource_type>.<resource_name> <existing_resource_id>
terraform import aws_instance.example <Give id of instance>

Explain different types of provisioners used in Terraform
Provisioners in Terraform are used to execute scripts or configuration management tools on a local machine or remote resources during the deployment 
or destruction of infrastructure. Provisioners enable you to perform tasks like installing software, configuring services, or executing custom scripts 
on instances after they are created.
Local Exec Provisioner
Executes a command on the machine running Terraform (local machine).
The local-exec provisioner in Terraform is used to execute commands on the machine running Terraform (local machine) during the provisioning or destruction of infrastructure. 
It is often used for local tasks that do not require interaction with the remote resources being managed by Terraform.
Let's consider an example where you want to create a file with some content on your local machine after creating an AWS EC2 instance:
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "local-exec" {
    command = "echo 'Hello, Terraform!' > output.txt"
  }
}
The aws_instance resource defines an EC2 instance.
The local-exec provisioner is attached to the aws_instance resource.
The command parameter specifies the command to execute. In this case, it's a simple shell command that echoes
the text "Hello, Terraform!" into a file named output.txt on the local machine.

Remote Exec Provisioner:
Use Case: Executes a command on a remote resource, typically after the resource is created.
The remote-exec provisioner in Terraform is used to execute commands on a remote resource (e.g., an instance) after it has been created. 
It enables you to perform additional configuration, setup, or customization on the remote machine as part of the Terraform provisioning process. 
The remote-exec provisioner is commonly used for tasks such as installing software, configuring services, or running scripts on instances.
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt-get install -y nginx",
    ]
  }
}

2 nd Example
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "remote-exec" {
    script = "path/to/configure_instance.sh"
  }
}
In this example, the remote-exec provisioner executes a script (configure_instance.sh) located on the local machine. 
The script contains the commands to be executed on the remote instance.

File Provisioner
Use Case: Copies files or directories from the local machine to a remote resource.
The file provisioner in Terraform is used to copy files or directories from the local machine (where Terraform is executed) to a remote resource 
after it has been created. This provisioner is helpful when you need to transfer configuration files, scripts, or other assets to a newly provisioned instance or resource.
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "file" {
    source      = "local/path/to/script.sh"
    destination = "/remote/path/script.sh"
  }
}



Explain modules?
With Terraform, you can put your code inside of a Terraform module and reuse that module in multiple places throughout your code. 
Instead of having the same code copied and pasted in the staging and production environments, you’ll be able to have both environments reuse code from the same module:

###############################################################################################################################################

Interpolation
Interpolation in Terraform refers to the process of inserting dynamic values into strings or other constructs within the Terraform configuration. Terraform supports several types of interpolation, allowing you to reference and combine data from various sources within your configuration files.
Here are some common types of interpolation in Terraform:

###############################################################################################################################################

1. String interpolation: This is used to insert dynamic values into strings. In Terraform, you enclose the expression within ${}. For example:
name = "instance-${var.environment}"

Dynamic Instance Name:
environment = "development"
name = "webserver-${var.environment}"
If you use this configuration, the name attribute of your instance will be set to "webserver-development".

Concatenating Strings:
role = "webserver"
name = "${var.environment}-${var.region}-${role}"
Here, assuming environment = "production" and region = "us-east-1", the resulting value for name will be "production-us-east-1-webserver".


Example 1: Using Variables
variable "environment" {
  type    = string
  default = "production"
}

# Dynamic naming based on the environment variable
resource "aws_instance" "example" {
  tags = {
    Name = "web-${var.environment}"
  }
}
In this example, if the environment variable is set to "production", the instance name will be "web-production".


Example 2: Referencing Resource Attributes
resource "aws_subnet" "example_subnet" {
  cidr_block = "10.0.1.0/24"
}

# Using interpolation to include the subnet ID in the name
resource "aws_instance" "example_instance" {
  subnet_id = aws_subnet.example_subnet.id
  tags = {
    Name = "instance-in-${aws_subnet.example_subnet.cidr_block}"
  }
}
Here, the instance name will include the CIDR block of the associated subnet, resulting in something like "instance-in-10.0.1.0/24".

###############################################################################################################################################

2. Attribute interpolation: This is used to reference attributes of resources or data sources. Attribute interpolation in Terraform allows you to reference specific attributes of resources or data sources defined in your configuration.
For example:
subnet_id = aws_subnet.example.id

Example 1: Referencing Resource Attributes
# Define an AWS VPC resource
resource "aws_vpc" "example_vpc" {
  cidr_block = "10.0.0.0/16"
}

# Reference the ID attribute of the created VPC
resource "aws_subnet" "example_subnet" {
  vpc_id     = aws_vpc.example_vpc.id
  cidr_block = "10.0.1.0/24"
}
In this example, the aws_subnet resource references the id attribute of the aws_vpc.example_vpc resource using attribute interpolation. It sets the vpc_id parameter of the subnet to the ID of the created VPC.

Example 2: Using Output Values
# Define an AWS EC2 instance
resource "aws_instance" "example_instance" {
  ami           = "ami-12345678"
  instance_type = "t2.micro"
}

# Output the public IP address of the instance
output "instance_public_ip" {
  value = aws_instance.example_instance.public_ip
}
In this example, an output value is defined to retrieve the public IP address of the created EC2 instance. The public_ip attribute of the aws_instance.example_instance resource is referenced using attribute interpolation.

###############################################################################################################################################

3. Function interpolation: Terraform provides built-in functions that can be used for various purposes, such as generating random values, manipulating strings, or performing calculations. For example:
cidr_block = cidrsubnet(var.vpc_cidr_block, 8, count.index)

Example 1: Generating CIDR Blocks
# Define a variable for the VPC CIDR block
variable "vpc_cidr_block" {
  type    = string
  default = "10.0.0.0/16"
}

# Create multiple subnets with different CIDR blocks
resource "aws_subnet" "example_subnet" {
  count         = 3
  vpc_id        = aws_vpc.example_vpc.id
  cidr_block    = cidrsubnet(var.vpc_cidr_block, 8, count.index)
}
In this example, the cidrsubnet function is used to dynamically generate CIDR blocks for three subnets within the VPC. The function takes the VPC CIDR block defined in the variable var.vpc_cidr_block, divides it into smaller subnets with a prefix length of 8 bits (/24), and increments the subnet index using count.index.
count = 3: This indicates that three instances of the aws_subnet resource will be created.
vpc_id = aws_vpc.example_vpc.id: This specifies the VPC ID to which the subnets will belong. It references the id attribute of the VPC resource named example_vpc.
cidr_block = cidrsubnet(var.vpc_cidr_block, 8, count.index): This is where function interpolation is used. Here's how it works:
cidrsubnet: This is a Terraform function used to create a new CIDR block by dividing an existing CIDR block into smaller subnets.
var.vpc_cidr_block: This references the value of the vpc_cidr_block variable defined earlier, which represents the CIDR block of the VPC.
8: This parameter specifies the prefix length for the new subnets. In this case, each new subnet will have a /24 prefix length, which means it will have 256 IP addresses.
count.index: This is a special value that represents the index of the current resource instance being created. Since count = 3, it will range from 0 to 2. This index is used to generate unique CIDR blocks for each subnet.
So, the aws_subnet resource block creates three subnets within the specified VPC, each with a different CIDR block derived from the VPC's CIDR block. This allows for the creation of multiple subnets with non-overlapping IP address ranges.

Example 2: Generating Random Strings
# Create a random password for an AWS RDS instance
resource "aws_db_instance" "example_db_instance" {
  # Other configuration...

  # Generate a random password for the database
  password = random_password.generate_password.result
}

# Define a random password generator
resource "random_password" "generate_password" {
  length           = 16
  special          = true
  override_special = "_%@"
}
In this example, the random_password resource generates a random password with a length of 16 characters, including special characters. The interpolated value random_password.generate_password.result is used to retrieve the generated password for use in configuring the AWS RDS instance.

Example 3: Manipulating Strings
# Define a string and convert it to uppercase
locals {
  example_string = "hello, world!"
}

# Output the uppercase version of the string
output "uppercase_string" {
  value = upper(local.example_string)
}
In this example, the upper function is used to convert the string "hello, world!" to uppercase. The resulting uppercase string is then outputted using the output block.

###############################################################################################################################################

4. Variable interpolation: You can reference variables within your configuration using interpolation. 
Variable interpolation in Terraform allows you to reference variables defined in your configuration within other parts of your configuration
For example:
name = var.instance_name

Example 1: Using Variable for Instance Name
# Define a variable for the instance name
variable "instance_name" {
  type    = string
  default = "web-server"
}

# Create an AWS EC2 instance
resource "aws_instance" "example_instance" {
  ami           = "ami-12345678"
  instance_type = "t2.micro"

  # Use variable interpolation to set the instance name
  tags = {
    Name = var.instance_name
  }
}
In this example, the aws_instance resource uses variable interpolation to set the instance name tag. The value of the tag is retrieved from the instance_name variable defined earlier. This allows you to easily change the instance name by modifying the variable value.


Example 2: Using Variable for AMI ID
# Define a variable for the AMI ID
variable "ami_id" {
  type    = string
  default = "ami-12345678"
}

# Create an AWS EC2 instance
resource "aws_instance" "example_instance" {
  ami           = var.ami_id
  instance_type = "t2.micro"

  # Other configuration...
}
In this example, the aws_instance resource uses variable interpolation to specify the AMI ID. The value of the ami attribute is retrieved from the ami_id variable defined earlier. This allows you to easily switch between different AMIs by modifying the variable value.


###############################################################################################################################################

5. Map and list interpolation: You can reference individual elements of a map or list using interpolation. 
For example:
subnet_id = aws_subnet.example[count.index].id

Example 1: Referencing List Elements
# Define a list of subnet IDs
variable "subnet_ids" {
  type    = list(string)
  default = ["subnet-12345678", "subnet-87654321", "subnet-abcdef12"]
}

# Create an AWS EC2 instance in each subnet
resource "aws_instance" "example_instance" {
  count         = length(var.subnet_ids)
  ami           = "ami-12345678"
  instance_type = "t2.micro"
  subnet_id     = var.subnet_ids[count.index]

  # Other configuration...
}
In this part, you're creating AWS EC2 instances using the aws_instance resource. Here's a breakdown of the attributes used:

In this part, you're defining a Terraform variable named subnet_ids. This variable is of type list of strings (list(string)) and has a default value, which is a list of subnet IDs. This variable will hold a list of subnet IDs where you want to deploy EC2 instances.
In this part, you're creating AWS EC2 instances using the aws_instance resource. Here's a breakdown of the attributes used:
count = length(var.subnet_ids): This count meta-argument specifies that Terraform should create as many instances as there are elements in the subnet_ids list. The length(var.subnet_ids) expression calculates the length of the subnet_ids list.
ami = "ami-12345678": This specifies the ID of the Amazon Machine Image (AMI) to use for the instances. You can replace "ami-12345678" with the ID of the AMI you want to use.
instance_type = "t2.micro": This specifies the instance type for the EC2 instances. In this case, "t2.micro" is a type of instance that is suitable for testing and low-traffic applications.
subnet_id = var.subnet_ids[count.index]: This is where list interpolation is used. Here's how it works:
var.subnet_ids: This references the value of the subnet_ids variable, which holds a list of subnet IDs.
count.index: This is a special value that represents the index of the current resource instance being created. Since count is used and set to the length of var.subnet_ids, count.index will range from 0 to length(var.subnet_ids) - 1. This index is used to retrieve a specific subnet ID from the list for each instance.
So, the aws_instance resource block creates EC2 instances in each subnet specified in the subnet_ids list. Each instance will be associated with a different subnet based on the subnet ID retrieved from the list using list interpolation.

Example 2: Referencing Map Elements
# Define a map of instance types
variable "instance_types" {
  type    = map(string)
  default = {
    "web"     = "t2.micro"
    "database"= "t2.small"
    "cache"   = "m5.large"
  }
}

# Create AWS EC2 instances with different instance types
resource "aws_instance" "example_instance" {
  for_each = var.instance_types

  ami           = "ami-12345678"
  instance_type = var.instance_types[each.key]
  
  # Other configuration...
}
In this part, you're defining a Terraform variable named instance_types. This variable is of type map(string), meaning it is a map where the keys are strings and the values are also strings. The default attribute sets the default values for this map. Each key represents a type of instance (e.g., "web", "database", "cache"), and the corresponding value represents the instance type (e.g., "t2.micro", "t2.small", "m5.large").
In this part, you're creating AWS EC2 instances using the aws_instance resource. Here's a breakdown of what's happening:

for_each = var.instance_types: The for_each meta-argument iterates over each key-value pair in the instance_types map. For each key-value pair, Terraform creates an instance of the aws_instance resource.
ami = "ami-12345678": This specifies the ID of the Amazon Machine Image (AMI) to use for the instances. You can replace "ami-12345678" with the ID of the AMI you want to use.
instance_type = var.instance_types[each.key]: This is where map interpolation is used. Here's how it works:
var.instance_types: This references the value of the instance_types variable, which is a map containing instance types.
each.key: This represents the current key being processed in the for_each loop, which corresponds to the type of instance. For example, during the first iteration, each.key would be "web".
var.instance_types[each.key]: This retrieves the instance type associated with the current key (instance type) from the instance_types map.
So, the aws_instance resource block creates EC2 instances with different instance types based on the key-value pairs defined in the instance_types map. Each instance will have the specified instance type associated with it, allowing you to easily create instances with different configurations using a single resource block.

Example 3: Dynamically Generating Subnet IDs
# Define a list of subnet prefixes
variable "subnet_prefixes" {
  type    = list(string)
  default = ["10.0.1", "10.0.2", "10.0.3"]
}

# Create AWS subnets with dynamically generated CIDR blocks
resource "aws_subnet" "example_subnet" {
  count      = length(var.subnet_prefixes)
  vpc_id     = aws_vpc.example_vpc.id
  cidr_block = "${var.subnet_prefixes[count.index]}.0/24"

  # Other configuration...
}
In this part, you're defining a Terraform variable named subnet_prefixes. This variable is of type list(string), meaning it's a list where each element is a string. The default attribute sets the default values for this list. Each string element represents a subnet prefix (e.g., "10.0.1", "10.0.2", "10.0.3").
In this part, you're creating AWS subnets using the aws_subnet resource. Here's a breakdown of what's happening:

count = length(var.subnet_prefixes): The count meta-argument specifies that Terraform should create as many subnets as there are elements in the subnet_prefixes list. The length(var.subnet_prefixes) expression calculates the length of the subnet_prefixes list.
vpc_id = aws_vpc.example_vpc.id: This specifies the ID of the Virtual Private Cloud (VPC) to which the subnets will be associated. It references the id attribute of the VPC resource named example_vpc.
cidr_block = "${var.subnet_prefixes[count.index]}.0/24": This is where list interpolation is used. Here's how it works:
var.subnet_prefixes: This references the value of the subnet_prefixes variable, which is a list containing subnet prefixes.
count.index: This is a special value that represents the index of the current resource instance being created. Since count is used and set to the length of var.subnet_prefixes, count.index will range from 0 to length(var.subnet_prefixes) - 1. This index is used to retrieve a specific subnet prefix from the list for each subnet.
${var.subnet_prefixes[count.index]}.0/24: This generates a CIDR block for each subnet by concatenating the subnet prefix from the list with .0/24. For example, if the current subnet prefix is "10.0.1", the resulting CIDR block will be "10.0.1.0/24".
So, the aws_subnet resource block creates AWS subnets with dynamically generated CIDR blocks based on the subnet prefixes defined in the subnet_prefixes list. Each subnet will have a unique CIDR block within the specified VPC, allowing you to easily create multiple subnets with different IP address ranges using a single resource block.



